import pandas as pd 
import re
import sys

def gpl_gse_title(df_general, df_gpl, df_gse):
    '''This function receives three dfs: the filtered df 
    (Homo sapiens and ChiP-seq), gpl_title and gse_title. 
    It will return a df with the GPL_Title and GSE_Title'''

    df_gpl_nodup = df_gpl.drop_duplicates()
    df_gse_nodup = df_gse.drop_duplicates()

    df_1 = pd.merge(df_general, df_gpl_nodup, on='GPL')
    df_2 = pd.merge(df_1, df_gse_nodup, on='GSE')
    return df_2


def ctl_treat_class(df_2):
    '''This function receives a df 
    and return a copy with blank cells 
    filled with ----'''

    df1 = df_2.copy()
    df1.replace('', '----', inplace=True)

    return df1


#load JF Dict 
def load_dict(file_name):
    '''function to generate a 
    dictionary from a file with 
    two strings separated by comma'''

    dict_target = {}

    target = open(file_name, 'r')

    for i in target:
        i = i.strip()
        key,value = i.split(',')
        dict_target[key]=value

    return dict_target


#Creating a list of target from dict_target
def list_regex_values(dict_target):
    '''This function will return a string 
    with all values (targets-regex) from a 
    dictionary. It will return a list of all 
    regex to be used by
    the next function'''

    all_regex = dict_target.values()

    all_regex_str = "|".join(all_regex)

    all_regex_compiled = re.compile(all_regex_str,re.IGNORECASE)
    
    return all_regex_compiled


def target_CL(df_ctl_IP, file_name):
    '''This function receives the main df 
    (df_ctl_IP) and all_regex_compiled. The 
    code will a target in all_regex_compiled 
    (generated by list_regex_values function) 
    doing a parse in 3 columns, and classify the 
    confidence intervals according with the column
    that the target was found. You shoud give a df 
    containing a Source_cell, Title and Target columnn'''
     
    gsm = df_ctl_IP['GSM'].tolist()
    length = len(gsm)
    
    #put the df_lengh for range
    list_target = list(range(length))

    #put the df_lengh for range
    CL = list(range(length))

    index = 0
    for index, row in df_ctl_IP.iterrows():
        match_source  = re.search(all_regex_compiled, row["Source_cell"])
        match_title  = re.search(all_regex_compiled, row['Title'])
        match_target  = re.search(all_regex_compiled, row['Target'])


        if match_source:
            list_target[index] = match_source.group()
            CL[index] = 'third'

        if match_title:
            list_target[index] = match_title.group()
            CL[index] = 'second'

        if match_target:
            list_target[index] = match_target.group()
            CL[index] = 'first'
        
        if isinstance(CL[index], int):
            CL[index] = gsm[index]
            list_target[index] = gsm[index]

        index += 1
              
    return columns_target_CL(df_ctl_IP, list_target, CL)


def reorder_cols(df_almost_target_index):
    '''This function receives the df (including 
    GPL and GSE title, target-interest and CL) 
    columns to reorder them. It will return a df 
    with the Title column renamed to GSM_Title and
    the reordered columns'''

    df_almost_target_index.rename(columns={'Title':'GSM_title'}, inplace=True)
    #no categories
    cols_new = ['Release-Date', 'Organism', 'Library_strategy', 'GPL','GPL_title', 'GSE', 'GSE_title', 'GSM','GSM_title', 'chip_antib_catalog', 'Target', 'Cell_line', 'Cell_type', 'Source_cell', 'Target-interest', 'CL-target']
    df= df_almost_target_index[cols_new]
    return df


def add_srr_count_col(df_col_reorder, df_gsm_adr_srx_srr_final):
    '''This function receives two dfs and returns a df_final with 
    the re-ordered columns'''

    df1 = df_gsm_adr_srx_srr_final.copy()
    df_final = pd.merge(df_col_reorder, df1, on='GSM')
    return df_final    

    

def columns_target_CL(df_ctl_IP, list1, list2):
    '''This function receives to list and will 
    create new columns to return a df'''

    df1 = df_ctl_IP.copy()
    df1['Target-interest'] = list1
    df1['CL-target'] = list2
    
    return df1



